=== EXTRACTED TSX FILES ===
Generated from: /Users/syaz/Dropbox/PYprograms/Votek_AI_LLC/code/frontendV4
Total files: 23
==================================================

==================== FILE: src/App.tsx ====================
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'
import { InvitePage } from './components/auth/InvitePage'
import { ResetPasswordPage } from './components/auth/ResetPasswordPage'
import { ReauthPage } from './components/auth/ReauthPage'
import { ChangeEmailPage } from './components/auth/ChangeEmailPage'
import { MagicLinkPage } from './components/auth/MagicLinkPage'
import { ConfirmSignupPage } from './components/auth/ConfirmSignupPage'
import { AuthHandler } from './components/auth/AuthHandler'
import { ProtectedRoute } from './components/common/ProtectedRoute'
import { Dashboard } from './components/common/Dashboard'

function App() {
  return (
    <Router>
      <Routes>
        {/* Public authentication routes */}
        <Route path="/auth" element={<AuthHandler />} />
        <Route path="/invite" element={<InvitePage />} />
        <Route path="/reset-password" element={<ResetPasswordPage />} />
        <Route path="/magic-link" element={<MagicLinkPage />} />
        <Route path="/confirm-signup" element={<ConfirmSignupPage />} />
        <Route path="/change-email" element={<ChangeEmailPage />} />
        
        {/* Protected routes */}
        <Route path="/reauth" element={
          <ProtectedRoute>
            <ReauthPage />
          </ProtectedRoute>
        } />
        
        {/* Main application - all other routes */}
        <Route path="/*" element={
          <ProtectedRoute>
            <Dashboard />
          </ProtectedRoute>
        } />
      </Routes>
    </Router>
  )
}

export default App

============================================================

==================== FILE: src/components/auth/AuthCallback.tsx ====================
import { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { supabase } from '../../lib/supabase'

export const AuthCallback = () => {
  const navigate = useNavigate()
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const handleAuthCallback = async () => {
      try {
        // Get the URL hash/search params
        const urlParams = new URLSearchParams(window.location.search)
        const hashParams = new URLSearchParams(window.location.hash.substring(1))
        
        // Check both URL params and hash params for tokens
        const accessToken = urlParams.get('access_token') || hashParams.get('access_token')
        const refreshToken = urlParams.get('refresh_token') || hashParams.get('refresh_token')
        const tokenType = urlParams.get('token_type') || hashParams.get('token_type')
        const type = urlParams.get('type') || hashParams.get('type')

        if (accessToken && refreshToken && type === 'invite') {
          // Set the session with the tokens
          const { error: sessionError } = await supabase.auth.setSession({
            access_token: accessToken,
            refresh_token: refreshToken,
          })

          if (sessionError) {
            console.error('Session error:', sessionError)
            setError('Failed to establish session')
            return
          }

          // Redirect to password setup page with special flag
          navigate('/invite?setup=true')
        } else {
          // Handle other auth flows or redirect to login
          navigate('/login')
        }
      } catch (err) {
        console.error('Auth callback error:', err)
        setError('Authentication failed')
      }
    }

    handleAuthCallback()
  }, [navigate])

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full text-center">
          <img
            className="mx-auto h-20 w-auto mb-8"
            src="/IntentScout.png"
            alt="IntentScout"
          />
          <div className="bg-red-50 border border-red-200 rounded-lg p-6">
            <h2 className="text-xl font-semibold text-red-800 mb-2">Authentication Error</h2>
            <p className="text-red-600">{error}</p>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full text-center">
        <img
          className="mx-auto h-20 w-auto mb-8"
          src="/IntentScout.png"
          alt="IntentScout"
        />
        <div className="w-8 h-8 border-4 border-orange-600 border-t-transparent rounded-full animate-spin mx-auto mb-4" />
        <p className="text-gray-600">Processing authentication...</p>
      </div>
    </div>
  )
}

============================================================

==================== FILE: src/components/auth/AuthHandler.tsx ====================
import { useEffect, useState } from 'react'
import { useNavigate, useLocation } from 'react-router-dom'
import { supabase } from '../../lib/supabase'

export const AuthHandler = () => {
  const navigate = useNavigate()
  const location = useLocation()
  const [isProcessing, setIsProcessing] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const handleAuthCallback = async () => {
      try {
        // Parse both URL search params and hash params
        const urlParams = new URLSearchParams(location.search)
        const hashParams = new URLSearchParams(location.hash.substring(1))
        
        // Get all possible parameters
        const type = urlParams.get('type') || hashParams.get('type')
        const accessToken = urlParams.get('access_token') || hashParams.get('access_token')
        const refreshToken = urlParams.get('refresh_token') || hashParams.get('refresh_token')
        const error_code = urlParams.get('error_code') || hashParams.get('error_code')
        const error_description = urlParams.get('error_description') || hashParams.get('error_description')

        console.log('Auth handler params:', { 
          type, 
          hasAccessToken: !!accessToken, 
          hasRefreshToken: !!refreshToken,
          error_code,
          search: location.search,
          hash: location.hash 
        })

        // Handle errors
        if (error_code) {
          let errorMessage = 'Authentication failed'
          if (error_code === 'otp_expired') {
            errorMessage = 'The link has expired. Please request a new one.'
          } else if (error_description) {
            errorMessage = decodeURIComponent(error_description.replace(/\+/g, ' '))
          }
          setError(errorMessage)
          setIsProcessing(false)
          return
        }

        // Handle password reset
        if (type === 'recovery' && accessToken && refreshToken) {
          const { error: sessionError } = await supabase.auth.setSession({
            access_token: accessToken,
            refresh_token: refreshToken,
          })

          if (sessionError) {
            console.error('Session error:', sessionError)
            setError('Failed to establish session for password reset')
          } else {
            // Redirect to reset password page in reset mode
            navigate('/reset-password?mode=reset', { replace: true })
          }
          return
        }

        // Handle invite
        if (type === 'invite' && accessToken && refreshToken) {
          const { error: sessionError } = await supabase.auth.setSession({
            access_token: accessToken,
            refresh_token: refreshToken,
          })

          if (sessionError) {
            console.error('Invite session error:', sessionError)
            setError('Failed to process invitation')
          } else {
            navigate('/invite?setup=true', { replace: true })
          }
          return
        }

        // Handle magic link
        if (type === 'magiclink' && accessToken && refreshToken) {
          const { error: sessionError } = await supabase.auth.setSession({
            access_token: accessToken,
            refresh_token: refreshToken,
          })

          if (sessionError) {
            console.error('Magic link session error:', sessionError)
            setError('Failed to sign in with magic link')
          } else {
            navigate('/', { replace: true })
          }
          return
        }

        // Handle email change confirmation
        if (type === 'email_change') {
          navigate('/change-email?confirmed=true', { replace: true })
          return
        }

        // Handle signup confirmation
        if (type === 'signup') {
          navigate('/confirm-signup', { replace: true })
          return
        }

        // If no recognized type, redirect to login
        navigate('/login', { replace: true })

      } catch (err) {
        console.error('Auth callback error:', err)
        setError('Authentication processing failed')
      }

      setIsProcessing(false)
    }

    handleAuthCallback()
  }, [location, navigate])

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full text-center">
          <img
            className="mx-auto h-20 w-auto mb-8"
            src="/IntentScout.png"
            alt="IntentScout"
          />
          <div className="bg-red-50 border border-red-200 rounded-lg p-6">
            <h2 className="text-xl font-semibold text-red-800 mb-2">Authentication Error</h2>
            <p className="text-red-600 mb-4">{error}</p>
            <button
              onClick={() => navigate('/login')}
              className="btn-primary"
            >
              Return to Sign In
            </button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full text-center">
        <img
          className="mx-auto h-20 w-auto mb-8"
          src="/IntentScout.png"
          alt="IntentScout"
        />
        <div className="w-8 h-8 border-4 border-orange-600 border-t-transparent rounded-full animate-spin mx-auto mb-4" />
        <p className="text-gray-600">Processing authentication...</p>
      </div>
    </div>
  )
}

============================================================

==================== FILE: src/components/auth/ChangeEmailPage.tsx ====================
import { useState, useEffect } from 'react'
import { useLocation, useNavigate } from 'react-router-dom'
import { useAuth } from '../../hooks/useAuth'
import { supabase } from '../../lib/supabase'
import { cn } from '../../utils/cn'

export const ChangeEmailPage = () => {
  const { user } = useAuth()
  const location = useLocation()
  const navigate = useNavigate()
  const [newEmail, setNewEmail] = useState('')
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState<string | null>(null)
  const [mode, setMode] = useState<'request' | 'confirm'>('request')

  // Parse URL parameters for email confirmation
  const urlParams = new URLSearchParams(location.search)
  const type = urlParams.get('type')
  const token = urlParams.get('token')

  useEffect(() => {
    // If we have an email change confirmation token
    if (type === 'email_change' && token) {
      setMode('confirm')
      handleEmailConfirmation()
    }
  }, [type, token])

  const handleEmailConfirmation = async () => {
    try {
      setIsSubmitting(true)
      
      const { error: confirmError } = await supabase.auth.verifyOtp({
        token_hash: token!,
        type: 'email_change',
      })

      if (confirmError) {
        setError('Invalid or expired confirmation link')
      } else {
        setSuccess('Email successfully updated!')
        setTimeout(() => navigate('/'), 2000)
      }
    } catch (err) {
      console.error('Email confirmation error:', err)
      setError('Failed to confirm email change')
    }
    
    setIsSubmitting(false)
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!newEmail.trim()) {
      setError('Please enter a new email address')
      return
    }

    if (newEmail === user?.email) {
      setError('New email must be different from current email')
      return
    }

    setIsSubmitting(true)
    setError(null)

    try {
      const { error: updateError } = await supabase.auth.updateUser({
        email: newEmail,
      })

      if (updateError) {
        setError(updateError.message)
      } else {
        setSuccess('Confirmation email sent to your new email address. Please check both your current and new email inboxes.')
      }
    } catch (err) {
      console.error('Change email error:', err)
      setError('Failed to initiate email change')
    }

    setIsSubmitting(false)
  }

  if (mode === 'confirm') {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full space-y-8">
          <div className="text-center">
            <img
              className="mx-auto h-20 w-auto"
              src="/IntentScout.png"
              alt="IntentScout"
            />
            <h2 className="mt-6 text-3xl font-bold text-gray-900">
              Email Confirmation
            </h2>
            {isSubmitting ? (
              <div className="mt-6">
                <div className="w-8 h-8 border-4 border-orange-600 border-t-transparent rounded-full animate-spin mx-auto mb-4" />
                <p className="text-gray-600">Confirming your email change...</p>
              </div>
            ) : error ? (
              <div className="mt-6 bg-red-50 border border-red-200 rounded-lg p-6">
                <p className="text-red-600">{error}</p>
                <button
                  onClick={() => navigate('/login')}
                  className="mt-4 text-sm text-orange-600 hover:text-orange-500"
                >
                  Return to Sign In
                </button>
              </div>
            ) : success ? (
              <div className="mt-6 bg-green-50 border border-green-200 rounded-lg p-6">
                <p className="text-green-600">{success}</p>
                <p className="text-sm text-gray-600 mt-2">Redirecting to application...</p>
              </div>
            ) : null}
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div className="text-center">
          <img
            className="mx-auto h-20 w-auto"
            src="/IntentScout.png"
            alt="IntentScout"
          />
          <h2 className="mt-6 text-3xl font-bold text-gray-900">
            Change Email Address
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            Update your account email address
          </p>
          {user?.email && (
            <p className="mt-1 text-sm text-gray-500">
              Current email: {user.email}
            </p>
          )}
        </div>
        
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div>
            <label htmlFor="newEmail" className="block text-sm font-medium text-gray-700">
              New Email Address
            </label>
            <input
              id="newEmail"
              name="newEmail"
              type="email"
              autoComplete="email"
              required
              value={newEmail}
              onChange={(e) => setNewEmail(e.target.value)}
              className={cn(
                "input-field mt-1",
                error && "border-red-300 focus:ring-red-500 focus:border-red-500"
              )}
              placeholder="Enter new email address"
              disabled={isSubmitting}
            />
            <p className="mt-1 text-xs text-gray-500">
              You'll receive confirmation emails at both your current and new email addresses
            </p>
          </div>

          {error && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-3">
              <p className="text-sm text-red-600">{error}</p>
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-3">
              <p className="text-sm text-green-600">{success}</p>
            </div>
          )}

          <div className="flex space-x-3">
            <button
              type="submit"
              disabled={isSubmitting || !newEmail.trim()}
              className={cn(
                "flex-1 btn-primary py-3 text-base",
                (isSubmitting || !newEmail.trim()) && 
                "opacity-50 cursor-not-allowed"
              )}
            >
              {isSubmitting ? (
                <div className="flex items-center justify-center">
                  <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                  Sending confirmation...
                </div>
              ) : (
                'Send Confirmation'
              )}
            </button>
            
            <button
              type="button"
              onClick={() => navigate('/')}
              disabled={isSubmitting}
              className="flex-1 btn-secondary py-3 text-base"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

============================================================

==================== FILE: src/components/auth/ConfirmSignupPage.tsx ====================
import { useState, useEffect } from 'react'
import { useLocation, useNavigate } from 'react-router-dom'
import { supabase } from '../../lib/supabase'

export const ConfirmSignupPage = () => {
  const location = useLocation()
  const navigate = useNavigate()
  const [isConfirming, setIsConfirming] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState<string | null>(null)

  // Parse URL parameters
  const urlParams = new URLSearchParams(location.search)
  const type = urlParams.get('type')
  const token = urlParams.get('token')

  useEffect(() => {
    const confirmSignup = async () => {
      if (!token || type !== 'signup') {
        setError('Invalid confirmation link')
        setIsConfirming(false)
        return
      }

      try {
        const { error: confirmError } = await supabase.auth.verifyOtp({
          token_hash: token,
          type: 'signup',
        })

        if (confirmError) {
          console.error('Signup confirmation error:', confirmError)
          setError('Invalid or expired confirmation link')
        } else {
          setSuccess('Account confirmed successfully!')
          setTimeout(() => navigate('/'), 2000)
        }
      } catch (err) {
        console.error('Error confirming signup:', err)
        setError('Failed to confirm account')
      }

      setIsConfirming(false)
    }

    confirmSignup()
  }, [token, type, navigate])

  const handleResendConfirmation = async () => {
    // This would typically require the email, which we don't have here
    // You might want to redirect to a page where they can enter their email
    navigate('/login')
  }

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div className="text-center">
          <img
            className="mx-auto h-20 w-auto"
            src="/IntentScout.png"
            alt="IntentScout"
          />
          <h2 className="mt-6 text-3xl font-bold text-gray-900">
            Account Confirmation
          </h2>
          
          {isConfirming ? (
            <div className="mt-6">
              <div className="w-8 h-8 border-4 border-orange-600 border-t-transparent rounded-full animate-spin mx-auto mb-4" />
              <p className="text-gray-600">Confirming your account...</p>
            </div>
          ) : error ? (
            <div className="mt-6 bg-red-50 border border-red-200 rounded-lg p-6">
              <h3 className="text-lg font-medium text-red-800 mb-2">Confirmation Failed</h3>
              <p className="text-red-600 mb-4">{error}</p>
              <div className="space-y-2">
                <p className="text-sm text-gray-600">
                  The confirmation link may have expired or already been used.
                </p>
                <button
                  onClick={handleResendConfirmation}
                  className="btn-primary"
                >
                  Go to Sign In
                </button>
              </div>
            </div>
          ) : success ? (
            <div className="mt-6 bg-green-50 border border-green-200 rounded-lg p-6">
              <h3 className="text-lg font-medium text-green-800 mb-2">Welcome to IntentScout!</h3>
              <p className="text-green-600 mb-2">{success}</p>
              <p className="text-sm text-gray-600">
                You can now access all features. Redirecting to the application...
              </p>
            </div>
          ) : null}
        </div>
      </div>
    </div>
  )
}

============================================================

==================== FILE: src/components/auth/InvitePage.tsx ====================
import { useState, useEffect } from 'react'
import { useLocation, useNavigate } from 'react-router-dom'
import { supabase } from '../../lib/supabase'
import { cn } from '../../utils/cn'

export const InvitePage = () => {
  const location = useLocation()
  const navigate = useNavigate()
  const [password, setPassword] = useState('')
  const [confirmPassword, setConfirmPassword] = useState('')
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [isProcessingInvite, setIsProcessingInvite] = useState(true)

  // Parse URL parameters manually since we're coming from an external link
  const urlParams = new URLSearchParams(location.search)
  const token = urlParams.get('token')
  const type = urlParams.get('type')

  useEffect(() => {
    const processInvite = async () => {
      // Check if we're coming from the invite setup flow
      const isSetupFlow = urlParams.get('setup') === 'true'
      
      if (isSetupFlow) {
        // User has completed Supabase verification, show password setup form
        setIsProcessingInvite(false)
        return
      }

      if (!token || type !== 'invite') {
        setError('Invalid invitation link')
        setIsProcessingInvite(false)
        return
      }

      try {
        // For invite links, we'll redirect to Supabase auth which will redirect back
        // This is the correct flow for Supabase invites
        window.location.href = `https://aobnlsdjzbukbsefntjj.supabase.co/auth/v1/verify?token=${token}&type=invite&redirect_to=${window.location.origin}/invite?setup=true`
      } catch (err) {
        console.error('Error processing invite:', err)
        setError('Failed to process invitation')
        setIsProcessingInvite(false)
      }
    }

    processInvite()
  }, [token, type, navigate])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!password.trim() || !confirmPassword.trim()) {
      setError('Please fill in all fields')
      return
    }

    if (password !== confirmPassword) {
      setError('Passwords do not match')
      return
    }

    if (password.length < 6) {
      setError('Password must be at least 6 characters long')
      return
    }

    setIsSubmitting(true)
    setError(null)

    try {
      // Accept the invitation by setting up the password
      const { error: updateError } = await supabase.auth.updateUser({
        password: password
      })

      if (updateError) {
        console.error('Password setup error:', updateError)
        setError(updateError.message)
      } else {
        // Successfully set up account, redirect to app
        navigate('/')
      }
    } catch (err) {
      console.error('Error setting up account:', err)
      setError('Failed to set up your account')
    }

    setIsSubmitting(false)
  }

  if (isProcessingInvite) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full text-center">
          <img
            className="mx-auto h-20 w-auto mb-8"
            src="/IntentScout.png"
            alt="IntentScout"
          />
          <div className="w-8 h-8 border-4 border-orange-600 border-t-transparent rounded-full animate-spin mx-auto mb-4" />
          <p className="text-gray-600">Processing your invitation...</p>
        </div>
      </div>
    )
  }

  if (error && !token) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full text-center">
          <img
            className="mx-auto h-20 w-auto mb-8"
            src="/IntentScout.png"
            alt="IntentScout"
          />
          <div className="bg-red-50 border border-red-200 rounded-lg p-6">
            <h2 className="text-xl font-semibold text-red-800 mb-2">Invalid Invitation</h2>
            <p className="text-red-600">{error}</p>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div className="text-center">
          <img
            className="mx-auto h-20 w-auto"
            src="/IntentScout.png"
            alt="IntentScout"
          />
          <h2 className="mt-6 text-3xl font-bold text-gray-900">
            Complete Your Setup
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            Set up your password to access IntentScout
          </p>
        </div>
        
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                required
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className={cn(
                  "input-field mt-1",
                  error && "border-red-300 focus:ring-red-500 focus:border-red-500"
                )}
                placeholder="Enter your password (min 6 characters)"
                disabled={isSubmitting}
              />
            </div>
            
            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
                Confirm Password
              </label>
              <input
                id="confirmPassword"
                name="confirmPassword"
                type="password"
                required
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                className={cn(
                  "input-field mt-1",
                  error && "border-red-300 focus:ring-red-500 focus:border-red-500"
                )}
                placeholder="Confirm your password"
                disabled={isSubmitting}
              />
            </div>
          </div>

          {error && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-3">
              <p className="text-sm text-red-600">{error}</p>
            </div>
          )}

          <div>
            <button
              type="submit"
              disabled={isSubmitting || !password.trim() || !confirmPassword.trim()}
              className={cn(
                "w-full btn-primary py-3 text-base",
                (isSubmitting || !password.trim() || !confirmPassword.trim()) && 
                "opacity-50 cursor-not-allowed"
              )}
            >
              {isSubmitting ? (
                <div className="flex items-center justify-center">
                  <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                  Setting up your account...
                </div>
              ) : (
                'Complete Setup'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

============================================================

==================== FILE: src/components/auth/LoginPage.tsx ====================
import { useState } from 'react'
import { useAuth } from '../../hooks/useAuth'
import { cn } from '../../utils/cn'

export const LoginPage = () => {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [isSubmitting, setIsSubmitting] = useState(false)
  const { signIn, error, loading } = useAuth()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!email.trim() || !password.trim()) {
      return
    }

    setIsSubmitting(true)
    await signIn(email, password)
    setIsSubmitting(false)
  }

  const isLoading = loading || isSubmitting

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div className="text-center">
          <img
            className="mx-auto h-20 w-auto"
            src="/IntentScout.png"
            alt="IntentScout"
          />
          <h2 className="mt-6 text-3xl font-bold text-gray-900">
            Sign in to IntentScout
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            AI-Powered Sales Intelligence Platform
          </p>
        </div>
        
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email address
              </label>
              <input
                id="email"
                name="email"
                type="email"
                autoComplete="email"
                required
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className={cn(
                  "input-field mt-1",
                  error && "border-red-300 focus:ring-red-500 focus:border-red-500"
                )}
                placeholder="Enter your email"
                disabled={isLoading}
              />
            </div>
            
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                autoComplete="current-password"
                required
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className={cn(
                  "input-field mt-1",
                  error && "border-red-300 focus:ring-red-500 focus:border-red-500"
                )}
                placeholder="Enter your password"
                disabled={isLoading}
              />
            </div>
          </div>

          {error && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-3">
              <p className="text-sm text-red-600">{error}</p>
            </div>
          )}

          <div>
            <button
              type="submit"
              disabled={isLoading || !email.trim() || !password.trim()}
              className={cn(
                "w-full btn-primary py-3 text-base",
                (isLoading || !email.trim() || !password.trim()) && 
                "opacity-50 cursor-not-allowed"
              )}
            >
              {isLoading ? (
                <div className="flex items-center justify-center">
                  <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                  Signing in...
                </div>
              ) : (
                'Sign in'
              )}
            </button>
          </div>

          <div className="text-center space-y-2">
            <a
              href="/reset-password"
              className="text-sm text-orange-600 hover:text-orange-500"
            >
              Forgot your password?
            </a>
            <br />
            <a
              href="/magic-link"
              className="text-sm text-gray-600 hover:text-gray-500"
            >
              Sign in with magic link instead
            </a>
          </div>
        </form>
      </div>
    </div>
  )
}

============================================================

==================== FILE: src/components/auth/MagicLinkPage.tsx ====================
import { useState, useEffect } from 'react'
import { useLocation, useNavigate } from 'react-router-dom'
import { supabase } from '../../lib/supabase'
import { cn } from '../../utils/cn'

export const MagicLinkPage = () => {
  const location = useLocation()
  const navigate = useNavigate()
  const [email, setEmail] = useState('')
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState<string | null>(null)
  const [mode, setMode] = useState<'request' | 'verify'>('request')

  // Parse URL parameters for magic link verification
  const urlParams = new URLSearchParams(location.search)
  const type = urlParams.get('type')
  const token = urlParams.get('token')

  useEffect(() => {
    // If we have a magic link token, verify it
    if (type === 'magiclink' && token) {
      setMode('verify')
      handleMagicLinkVerification()
    }
  }, [type, token])

  const handleMagicLinkVerification = async () => {
    try {
      setIsSubmitting(true)
      
      const { error: verifyError } = await supabase.auth.verifyOtp({
        token_hash: token!,
        type: 'magiclink',
      })

      if (verifyError) {
        setError('Invalid or expired magic link')
      } else {
        setSuccess('Successfully signed in!')
        setTimeout(() => navigate('/'), 2000)
      }
    } catch (err) {
      console.error('Magic link verification error:', err)
      setError('Failed to verify magic link')
    }
    
    setIsSubmitting(false)
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!email.trim()) {
      setError('Please enter your email address')
      return
    }

    setIsSubmitting(true)
    setError(null)

    try {
      const { error: magicLinkError } = await supabase.auth.signInWithOtp({
        email: email,
        options: {
          emailRedirectTo: `${window.location.origin}/auth`,
        },
      })

      if (magicLinkError) {
        setError(magicLinkError.message)
      } else {
        setSuccess('Magic link sent! Check your email for the sign-in link.')
      }
    } catch (err) {
      console.error('Magic link error:', err)
      setError('Failed to send magic link')
    }

    setIsSubmitting(false)
  }

  if (mode === 'verify') {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full space-y-8">
          <div className="text-center">
            <img
              className="mx-auto h-20 w-auto"
              src="/IntentScout.png"
              alt="IntentScout"
            />
            <h2 className="mt-6 text-3xl font-bold text-gray-900">
              Magic Link Verification
            </h2>
            {isSubmitting ? (
              <div className="mt-6">
                <div className="w-8 h-8 border-4 border-orange-600 border-t-transparent rounded-full animate-spin mx-auto mb-4" />
                <p className="text-gray-600">Verifying your magic link...</p>
              </div>
            ) : error ? (
              <div className="mt-6 bg-red-50 border border-red-200 rounded-lg p-6">
                <h3 className="text-lg font-medium text-red-800 mb-2">Verification Failed</h3>
                <p className="text-red-600">{error}</p>
                <button
                  onClick={() => navigate('/magic-link')}
                  className="mt-4 text-sm text-orange-600 hover:text-orange-500"
                >
                  Request a new magic link
                </button>
              </div>
            ) : success ? (
              <div className="mt-6 bg-green-50 border border-green-200 rounded-lg p-6">
                <h3 className="text-lg font-medium text-green-800 mb-2">Success!</h3>
                <p className="text-green-600">{success}</p>
                <p className="text-sm text-gray-600 mt-2">Redirecting to application...</p>
              </div>
            ) : null}
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div className="text-center">
          <img
            className="mx-auto h-20 w-auto"
            src="/IntentScout.png"
            alt="IntentScout"
          />
          <h2 className="mt-6 text-3xl font-bold text-gray-900">
            Sign in with Magic Link
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            Enter your email and we'll send you a secure sign-in link
          </p>
        </div>
        
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700">
              Email address
            </label>
            <input
              id="email"
              name="email"
              type="email"
              autoComplete="email"
              required
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className={cn(
                "input-field mt-1",
                error && "border-red-300 focus:ring-red-500 focus:border-red-500"
              )}
              placeholder="Enter your email"
              disabled={isSubmitting}
            />
            <p className="mt-1 text-xs text-gray-500">
              We'll send a secure link to sign you in without a password
            </p>
          </div>

          {error && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-3">
              <p className="text-sm text-red-600">{error}</p>
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-3">
              <p className="text-sm text-green-600">{success}</p>
              <p className="text-xs text-gray-600 mt-1">
                Check your email and click the link to sign in. The link will expire in 1 hour.
              </p>
            </div>
          )}

          <div>
            <button
              type="submit"
              disabled={isSubmitting || !email.trim()}
              className={cn(
                "w-full btn-primary py-3 text-base",
                (isSubmitting || !email.trim()) && 
                "opacity-50 cursor-not-allowed"
              )}
            >
              {isSubmitting ? (
                <div className="flex items-center justify-center">
                  <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                  Sending magic link...
                </div>
              ) : (
                'Send Magic Link'
              )}
            </button>
          </div>

          <div className="text-center space-y-2">
            <button
              type="button"
              onClick={() => navigate('/login')}
              className="text-sm text-orange-600 hover:text-orange-500"
            >
              Back to Password Sign In
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

============================================================

==================== FILE: src/components/auth/ReauthPage.tsx ====================
import { useState } from 'react'
import { useNavigate, useLocation } from 'react-router-dom'
import { useAuth } from '../../hooks/useAuth'
import { supabase } from '../../lib/supabase'
import { cn } from '../../utils/cn'

export const ReauthPage = () => {
  const { user } = useAuth()
  const navigate = useNavigate()
  const location = useLocation()
  const [password, setPassword] = useState('')
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [error, setError] = useState<string | null>(null)

  // Get the intended destination from location state
  const from = location.state?.from || '/'
  const reason = location.state?.reason || 'This action requires you to confirm your identity'

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!password.trim()) {
      setError('Please enter your password')
      return
    }

    if (!user?.email) {
      setError('User email not found')
      return
    }

    setIsSubmitting(true)
    setError(null)

    try {
      // Reauthenticate by signing in again
      const { error: signInError } = await supabase.auth.signInWithPassword({
        email: user.email,
        password: password,
      })

      if (signInError) {
        setError('Invalid password. Please try again.')
      } else {
        // Success - redirect to intended destination
        navigate(from, { replace: true })
      }
    } catch (err) {
      console.error('Reauthentication error:', err)
      setError('Authentication failed')
    }

    setIsSubmitting(false)
  }

  const handleCancel = () => {
    navigate(-1) // Go back to previous page
  }

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div className="text-center">
          <img
            className="mx-auto h-20 w-auto"
            src="/IntentScout.png"
            alt="IntentScout"
          />
          <h2 className="mt-6 text-3xl font-bold text-gray-900">
            Confirm Your Identity
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            {reason}
          </p>
          {user?.email && (
            <p className="mt-1 text-sm text-gray-500">
              Signed in as: {user.email}
            </p>
          )}
        </div>
        
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-700">
              Enter your password to continue
            </label>
            <input
              id="password"
              name="password"
              type="password"
              autoComplete="current-password"
              required
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className={cn(
                "input-field mt-1",
                error && "border-red-300 focus:ring-red-500 focus:border-red-500"
              )}
              placeholder="Enter your password"
              disabled={isSubmitting}
              autoFocus
            />
          </div>

          {error && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-3">
              <p className="text-sm text-red-600">{error}</p>
            </div>
          )}

          <div className="flex space-x-3">
            <button
              type="submit"
              disabled={isSubmitting || !password.trim()}
              className={cn(
                "flex-1 btn-primary py-3 text-base",
                (isSubmitting || !password.trim()) && 
                "opacity-50 cursor-not-allowed"
              )}
            >
              {isSubmitting ? (
                <div className="flex items-center justify-center">
                  <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                  Verifying...
                </div>
              ) : (
                'Continue'
              )}
            </button>
            
            <button
              type="button"
              onClick={handleCancel}
              disabled={isSubmitting}
              className="flex-1 btn-secondary py-3 text-base"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

============================================================

==================== FILE: src/components/auth/ResetPasswordPage.tsx ====================
import { useState, useEffect } from 'react'
import { useLocation, useNavigate } from 'react-router-dom'
import { supabase } from '../../lib/supabase'
import { cn } from '../../utils/cn'

export const ResetPasswordPage = () => {
  const location = useLocation()
  const navigate = useNavigate()
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [confirmPassword, setConfirmPassword] = useState('')
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState<string | null>(null)
  const [mode, setMode] = useState<'request' | 'reset'>('request')

  // Parse URL parameters from both search and hash
  const urlParams = new URLSearchParams(location.search)
  const hashParams = new URLSearchParams(location.hash.substring(1))
  
  const type = urlParams.get('type') || hashParams.get('type')
  const accessToken = urlParams.get('access_token') || hashParams.get('access_token') || 
                     urlParams.get('token') || hashParams.get('token')

  useEffect(() => {
    // Check if we're in reset mode via URL parameter
    const resetMode = urlParams.get('mode')
    
    if (resetMode === 'reset') {
      setMode('reset')
    } else if ((type === 'recovery' || type === 'magiclink') && accessToken) {
      setMode('reset')
      handleTokenSession()
    }
  }, [type, accessToken, location.search, location.hash])

  const handleTokenSession = async () => {
    if (!accessToken) return
    
    try {
      // Extract refresh token if available
      const refreshToken = urlParams.get('refresh_token') || hashParams.get('refresh_token')
      
      if (refreshToken) {
        const { error } = await supabase.auth.setSession({
          access_token: accessToken,
          refresh_token: refreshToken,
        })
        if (error) {
          console.error('Session error:', error)
        }
      }
    } catch (err) {
      console.error('Token session error:', err)
    }
  }

  const handleRequestReset = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!email.trim()) {
      setError('Please enter your email address')
      return
    }

    setIsSubmitting(true)
    setError(null)

    try {
      const { error: resetError } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/auth`,
      })

      if (resetError) {
        setError(resetError.message)
      } else {
        setSuccess('Password reset email sent! Check your inbox for instructions.')
      }
    } catch (err) {
      console.error('Reset password error:', err)
      setError('Failed to send reset email')
    }

    setIsSubmitting(false)
  }

  const handlePasswordReset = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!password.trim() || !confirmPassword.trim()) {
      setError('Please fill in all fields')
      return
    }

    if (password !== confirmPassword) {
      setError('Passwords do not match')
      return
    }

    if (password.length < 6) {
      setError('Password must be at least 6 characters long')
      return
    }

    setIsSubmitting(true)
    setError(null)

    try {
      const { error: updateError } = await supabase.auth.updateUser({
        password: password
      })

      if (updateError) {
        setError(updateError.message)
      } else {
        setSuccess('Password updated successfully!')
        setTimeout(() => navigate('/'), 2000)
      }
    } catch (err) {
      console.error('Update password error:', err)
      setError('Failed to update password')
    }

    setIsSubmitting(false)
  }

  if (mode === 'reset') {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full space-y-8">
          <div className="text-center">
            <img
              className="mx-auto h-20 w-auto"
              src="/IntentScout.png"
              alt="IntentScout"
            />
            <h2 className="mt-6 text-3xl font-bold text-gray-900">
              Reset Your Password
            </h2>
            <p className="mt-2 text-sm text-gray-600">
              Enter your new password below
            </p>
          </div>
          
          <form className="mt-8 space-y-6" onSubmit={handlePasswordReset}>
            <div className="space-y-4">
              <div>
                <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                  New Password
                </label>
                <input
                  id="password"
                  name="password"
                  type="password"
                  required
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className={cn(
                    "input-field mt-1",
                    error && "border-red-300 focus:ring-red-500 focus:border-red-500"
                  )}
                  placeholder="Enter new password (min 6 characters)"
                  disabled={isSubmitting}
                />
              </div>
              
              <div>
                <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
                  Confirm New Password
                </label>
                <input
                  id="confirmPassword"
                  name="confirmPassword"
                  type="password"
                  required
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  className={cn(
                    "input-field mt-1",
                    error && "border-red-300 focus:ring-red-500 focus:border-red-500"
                  )}
                  placeholder="Confirm new password"
                  disabled={isSubmitting}
                />
              </div>
            </div>

            {error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                <p className="text-sm text-red-600">{error}</p>
              </div>
            )}

            {success && (
              <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                <p className="text-sm text-green-600">{success}</p>
              </div>
            )}

            <div>
              <button
                type="submit"
                disabled={isSubmitting || !password.trim() || !confirmPassword.trim()}
                className={cn(
                  "w-full btn-primary py-3 text-base",
                  (isSubmitting || !password.trim() || !confirmPassword.trim()) && 
                  "opacity-50 cursor-not-allowed"
                )}
              >
                {isSubmitting ? (
                  <div className="flex items-center justify-center">
                    <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                    Updating password...
                  </div>
                ) : (
                  'Update Password'
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div className="text-center">
          <img
            className="mx-auto h-20 w-auto"
            src="/IntentScout.png"
            alt="IntentScout"
          />
          <h2 className="mt-6 text-3xl font-bold text-gray-900">
            Reset Password
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            Enter your email address and we'll send you a reset link
          </p>
        </div>
        
        <form className="mt-8 space-y-6" onSubmit={handleRequestReset}>
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700">
              Email address
            </label>
            <input
              id="email"
              name="email"
              type="email"
              autoComplete="email"
              required
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className={cn(
                "input-field mt-1",
                error && "border-red-300 focus:ring-red-500 focus:border-red-500"
              )}
              placeholder="Enter your email"
              disabled={isSubmitting}
            />
          </div>

          {error && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-3">
              <p className="text-sm text-red-600">{error}</p>
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-3">
              <p className="text-sm text-green-600">{success}</p>
            </div>
          )}

          <div>
            <button
              type="submit"
              disabled={isSubmitting || !email.trim()}
              className={cn(
                "w-full btn-primary py-3 text-base",
                (isSubmitting || !email.trim()) && 
                "opacity-50 cursor-not-allowed"
              )}
            >
              {isSubmitting ? (
                <div className="flex items-center justify-center">
                  <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                  Sending reset email...
                </div>
              ) : (
                'Send Reset Email'
              )}
            </button>
          </div>

          <div className="text-center">
            <button
              type="button"
              onClick={() => navigate('/login')}
              className="text-sm text-orange-600 hover:text-orange-500"
            >
              Back to Sign In
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

============================================================

==================== FILE: src/components/common/ApiExample.tsx ====================
import { useAuth } from '../../hooks/useAuth'

export const ApiExample = () => {
  const { user, organization, loading, error } = useAuth()

  if (loading) {
    return (
      <div className="p-6">
        <div className="w-8 h-8 border-4 border-orange-600 border-t-transparent rounded-full animate-spin mx-auto mb-4" />
        <p className="text-center text-gray-600">Loading organization data...</p>
      </div>
    )
  }

  if (error) {
    return (
      <div className="p-6">
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <h3 className="text-red-800 font-semibold">Error</h3>
          <p className="text-red-600">{error}</p>
        </div>
      </div>
    )
  }

  return (
    <div className="p-6 space-y-6">
      <h1 className="text-2xl font-bold">🏢 Organization Dashboard</h1>
      
      {user && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h2 className="text-lg font-semibold text-blue-800 mb-2">👤 Current User</h2>
          <div className="space-y-1">
            <p><span className="font-medium">Email:</span> {user.email}</p>
            <p><span className="font-medium">ID:</span> {user.id}</p>
            {user.createdAt && (
              <p><span className="font-medium">Joined:</span> {new Date(user.createdAt).toLocaleDateString()}</p>
            )}
          </div>
        </div>
      )}

      {organization && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
          <h2 className="text-lg font-semibold text-green-800 mb-2">🏢 Organization</h2>
          <div className="space-y-1">
            <p><span className="font-medium">Name:</span> {organization.name}</p>
            <p><span className="font-medium">ID:</span> {organization.id}</p>
          </div>
        </div>
      )}

      <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
        <h2 className="text-lg font-semibold text-orange-800 mb-2">🎯 Next Steps</h2>
        <p className="text-orange-700">
          Organization data loaded successfully! The backend auth system is working. 
          Ready to implement signals and other features.
        </p>
      </div>
    </div>
  )
}

============================================================

==================== FILE: src/components/common/Dashboard.tsx ====================
import { useEffect, useState } from 'react'
import { Routes, Route, useLocation } from 'react-router-dom'
import { Header } from './Header'
import { SignalsPage } from '../signals/SignalsPage'
import { OutreachPage } from '../outreach/OutreachPage'
import type { TabKey } from '../../types'

export const Dashboard = () => {
  const location = useLocation()
  const [activeTab, setActiveTab] = useState<TabKey>("signals")

  // Sync activeTab with current route
  useEffect(() => {
    if (location.pathname === '/outreach') {
      setActiveTab('outreach')
    } else {
      setActiveTab('signals')
    }
  }, [location.pathname])

  return (
    <div className="flex flex-col h-screen bg-gray-100 antialiased">
      <Header activeTab={activeTab} setActiveTab={setActiveTab} />
      <main className="flex-1 overflow-y-auto">
        <Routes>
          <Route path="/" element={<SignalsPage />} />
          <Route path="/signals" element={<SignalsPage />} />
          <Route path="/outreach" element={<OutreachPage />} />
        </Routes>
      </main>
    </div>
  )
}

============================================================

==================== FILE: src/components/common/Header.tsx ====================
import { LogOut } from 'lucide-react'
import { useNavigate } from 'react-router-dom'
import { useAuth } from '../../hooks/useAuth'
import { cn } from '../../utils/cn'
import type { TabKey } from '../../types'

interface HeaderProps {
  activeTab: TabKey
  setActiveTab: (tab: TabKey) => void
}

export const Header = ({ activeTab, setActiveTab }: HeaderProps) => {
  const { user, organization, signOut } = useAuth()
  const navigate = useNavigate()

  const navButtonClass = (tabName: TabKey) =>
    cn(
      "px-4 py-2 font-medium rounded-lg transition-all",
      activeTab === tabName
        ? "bg-orange-100 text-orange-600 shadow-sm"
        : "text-gray-600 hover:bg-gray-100 hover:text-gray-800"
    )

  return (
    <header className="bg-white border-b border-gray-200 py-4 px-6 flex items-center justify-between sticky top-0 z-30 shadow-sm">
      <div className="flex items-center">
        <div className="flex items-center mr-4 flex-col">
          <img src="/IntentScout.png" alt="IntentScout Logo" className="h-auto w-auto max-h-10 max-w-full mb-1" />
          <p className="text-xs text-gray-500 leading-tight">AI-Powered Sales Intelligence</p>
        </div>
      </div>
      
      <div className="flex items-center space-x-4">
        <nav className="flex space-x-1">
          <button
            className={navButtonClass("signals")}
            onClick={() => {
              setActiveTab("signals")
              navigate("/signals")
            }}
          >
            Signals
          </button>
          <button
            className={navButtonClass("outreach")}
            onClick={() => {
              setActiveTab("outreach")
              navigate("/outreach")
            }}
          >
            Outreach
          </button>
        </nav>
        
        <div className="flex items-center space-x-3 pl-4 border-l border-gray-200">
          <div className="flex items-center space-x-3">
            {/* User Info */}
            <div className="flex flex-col items-end">
              <span className="text-sm font-medium text-gray-700">{user?.email}</span>
              {organization && (
                <div className="flex items-center space-x-1">
                  {organization.logoUrl && (
                    <img 
                      src={organization.logoUrl} 
                      alt={`${organization.name} logo`}
                      className="w-4 h-4 rounded object-cover"
                      onError={(e) => {
                        // Hide image if it fails to load
                        e.currentTarget.style.display = 'none'
                      }}
                    />
                  )}
                  <span className="text-xs text-gray-500">{organization.name}</span>
                </div>
              )}
            </div>
            
            {/* Sign Out Button */}
            <button
              onClick={signOut}
              className="p-2 text-gray-600 hover:text-red-600 hover:bg-red-50 rounded-lg transition-all duration-200"
              title="Sign out"
            >
              <LogOut size={18} />
            </button>
          </div>
        </div>
      </div>
    </header>
  )
}

============================================================

==================== FILE: src/components/common/ProtectedRoute.tsx ====================
import { ReactNode } from 'react'
import { useAuth } from '../../hooks/useAuth'
import { LoginPage } from '../auth/LoginPage'

interface ProtectedRouteProps {
  children: ReactNode
}

export const ProtectedRoute = ({ children }: ProtectedRouteProps) => {
  const { user, loading } = useAuth()

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-4 border-orange-600 border-t-transparent rounded-full animate-spin mx-auto mb-4" />
          <p className="text-gray-600">Loading...</p>
        </div>
      </div>
    )
  }

  if (!user) {
    return <LoginPage />
  }

  return <>{children}</>
}

============================================================

==================== FILE: src/components/outreach/OutreachPage.tsx ====================
export const OutreachPage = () => {
  return (
    <div className="p-6">
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-8 text-center">
        <h1 className="text-2xl font-bold text-gray-900 mb-4">
          Outreach Management
        </h1>
        <p className="text-gray-600">
          This feature will be rolled out soon.
        </p>
      </div>
    </div>
  )
}

============================================================

==================== FILE: src/components/signals/DateSelector.tsx ====================
import { useState, useRef, useEffect } from 'react'

interface Props {
  selectedDate: string
  onChange: (date: string) => void
}

export const DateSelector = ({ selectedDate, onChange }: Props) => {
  const [showCalendar, setShowCalendar] = useState(false)
  const calendarRef = useRef<HTMLDivElement>(null)

  // Get previous and next day
  const getPreviousDay = (dateString: string): string => {
    const date = new Date(dateString)
    date.setUTCDate(date.getUTCDate() - 1)
    return date.toISOString().split('T')[0]
  }

  const getNextDay = (dateString: string): string => {
    const date = new Date(dateString)
    date.setUTCDate(date.getUTCDate() + 1)
    return date.toISOString().split('T')[0]
  }

  // Check if date is in the future
  const isFuture = (dateString: string): boolean => {
    const date = new Date(dateString + 'T00:00:00')
    const today = new Date()
    today.setHours(0, 0, 0, 0)
    return date > today
  }

  // Format date for display
  const formatDate = (dateString: string): string => {
    const date = new Date(dateString + 'T00:00:00')
    return date.toLocaleDateString('en-US', { 
      month: 'short', 
      day: 'numeric',
      year: date.getFullYear() !== new Date().getFullYear() ? 'numeric' : undefined
    })
  }

  // Handle navigation
  const handleNavigation = (direction: 'prev' | 'next') => {
    const newDate = direction === 'prev' ? getPreviousDay(selectedDate) : getNextDay(selectedDate)
    if (!isFuture(newDate)) {
      onChange(newDate)
    }
  }

  // Close calendar when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (calendarRef.current && !calendarRef.current.contains(event.target as Node)) {
        setShowCalendar(false)
      }
    }

    if (showCalendar) {
      document.addEventListener('mousedown', handleClickOutside)
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside)
    }
  }, [showCalendar])

  return (
    <div className="flex items-center space-x-1">
      {/* Previous Day Button */}
      <button
        onClick={() => handleNavigation('prev')}
        className="border border-gray-300 rounded-lg px-2 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500 text-sm flex items-center hover:bg-gray-50 bg-white"
        title={`Previous day (${formatDate(getPreviousDay(selectedDate))})`}
      >
        <svg className="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
        </svg>
      </button>

      {/* Calendar Selector */}
      <div className="relative" ref={calendarRef}>
        <button
          onClick={() => setShowCalendar(!showCalendar)}
          className="border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500 text-sm flex items-center space-x-2 hover:bg-gray-50 bg-white min-w-[140px]"
          title="Select date"
        >
          <svg className="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          <span className="text-gray-700">
            {formatDate(selectedDate)}
          </span>
        </button>
        
        {showCalendar && (
          <div className="absolute top-full right-0 mt-2 z-50">
            <CalendarPicker
              selectedDate={selectedDate}
              onDateSelect={(date) => {
                onChange(date)
                setShowCalendar(false)
              }}
              onClose={() => setShowCalendar(false)}
            />
          </div>
        )}
      </div>

      {/* Next Day Button */}
      <button
        onClick={() => handleNavigation('next')}
        disabled={isFuture(getNextDay(selectedDate))}
        className="border border-gray-300 rounded-lg px-2 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500 text-sm flex items-center hover:bg-gray-50 bg-white disabled:opacity-50 disabled:cursor-not-allowed"
        title={isFuture(getNextDay(selectedDate)) ? "Cannot navigate to future dates" : `Next day (${formatDate(getNextDay(selectedDate))})`}
      >
        <svg className="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </div>
  )
}

// Mini calendar component
interface CalendarPickerProps {
  selectedDate: string
  onDateSelect: (date: string) => void
  onClose: () => void
}

const CalendarPicker = ({ selectedDate, onDateSelect, onClose }: CalendarPickerProps) => {
  const [currentMonth, setCurrentMonth] = useState(() => {
    const date = new Date(selectedDate + 'T00:00:00')
    return new Date(date.getFullYear(), date.getMonth(), 1)
  })

  const today = new Date()
  const monthNames = [
    "January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December"
  ]

  const getDaysInMonth = (date: Date) => {
    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate()
  }

  const getFirstDayOfMonth = (date: Date) => {
    return new Date(date.getFullYear(), date.getMonth(), 1).getDay()
  }

  const handleDateClick = (day: number) => {
    const year = currentMonth.getFullYear()
    const month = String(currentMonth.getMonth() + 1).padStart(2, '0')
    const dayStr = String(day).padStart(2, '0')
    const dateString = `${year}-${month}-${dayStr}`
    onDateSelect(dateString)
  }

  const renderCalendarDays = () => {
    const daysInMonth = getDaysInMonth(currentMonth)
    const firstDay = getFirstDayOfMonth(currentMonth)
    const days = []

    // Empty cells for days before the first day of the month
    for (let i = 0; i < firstDay; i++) {
      days.push(<div key={`empty-${i}`} className="w-8 h-8"></div>)
    }

    // Days of the month
    for (let day = 1; day <= daysInMonth; day++) {
      const currentDateString = `${currentMonth.getFullYear()}-${String(currentMonth.getMonth() + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`
      const isSelected = selectedDate === currentDateString
      
      const isToday = today.getDate() === day && 
        today.getMonth() === currentMonth.getMonth() && 
        today.getFullYear() === currentMonth.getFullYear()

      // Check if this date is in the future
      const dayDate = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), day)
      const todayDate = new Date()
      todayDate.setHours(0, 0, 0, 0)
      dayDate.setHours(0, 0, 0, 0)
      const isFutureDate = dayDate > todayDate

      days.push(
        <button
          key={day}
          onClick={() => !isFutureDate && handleDateClick(day)}
          disabled={isFutureDate}
          className={`w-8 h-8 text-sm rounded-md flex items-center justify-center transition-colors ${
            isSelected
              ? 'bg-orange-500 text-white font-medium'
              : isToday
              ? 'bg-orange-100 text-orange-700 font-medium'
              : isFutureDate
              ? 'text-gray-300 cursor-not-allowed'
              : 'text-gray-700 hover:bg-orange-50 hover:text-orange-600'
          }`}
        >
          {day}
        </button>
      )
    }

    return days
  }

  return (
    <div className="bg-white border border-gray-200 rounded-lg shadow-xl p-4 w-72">
      {/* Header with month navigation */}
      <div className="flex items-center justify-between mb-4">
        <button
          onClick={() => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1, 1))}
          className="p-1 rounded-md hover:bg-gray-100 text-gray-600 hover:text-gray-800"
        >
          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
          </svg>
        </button>
        
        <h3 className="text-sm font-semibold text-gray-900">
          {monthNames[currentMonth.getMonth()]} {currentMonth.getFullYear()}
        </h3>
        
        <button
          onClick={() => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1))}
          className="p-1 rounded-md hover:bg-gray-100 text-gray-600 hover:text-gray-800"
        >
          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
          </svg>
        </button>
      </div>

      {/* Days of week header */}
      <div className="grid grid-cols-7 gap-1 mb-2">
        {['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'].map(day => (
          <div key={day} className="w-8 h-6 text-xs font-medium text-gray-500 flex items-center justify-center">
            {day}
          </div>
        ))}
      </div>

      {/* Calendar grid */}
      <div className="grid grid-cols-7 gap-1">
        {renderCalendarDays()}
      </div>

      {/* Quick actions */}
      <div className="mt-4 pt-3 border-t border-gray-200">
        <div className="flex justify-between">
          <button
            onClick={() => {
              const yesterday = new Date()
              yesterday.setDate(yesterday.getDate() - 1)
              onDateSelect(yesterday.toISOString().split('T')[0])
              onClose()
            }}
            className="text-xs text-orange-600 hover:text-orange-700 font-medium"
          >
            Yesterday
          </button>
          <button
            onClick={() => {
              const today = new Date()
              onDateSelect(today.toISOString().split('T')[0])
              onClose()
            }}
            className="text-xs text-orange-600 hover:text-orange-700 font-medium"
          >
            Today
          </button>
        </div>
      </div>
    </div>
  )
}

============================================================

==================== FILE: src/components/signals/FilterPanel.tsx ====================
import { useState, useEffect, useRef } from 'react'
import { X } from 'lucide-react'
import { api } from '../../lib/apiClient'
import type { FilterOptions } from './types'

interface Props {
  filters: FilterOptions
  onChange: (filters: Partial<FilterOptions>) => void
  isOpen: boolean
  onClose: () => void
}

export const FilterPanel = ({ filters, onChange, isOpen, onClose }: Props) => {
  const [verticals, setVerticals] = useState<string[]>([])
  const [loading, setLoading] = useState(true)
  const panelRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    // Load available verticals from API (if we implement this endpoint)
    // For now, using static list based on common verticals
    const loadVerticals = async () => {
      try {
        // TODO: Implement /api/signals/verticals endpoint if needed
        const staticVerticals = [
          'technology',
          'healthcare', 
          'finance',
          'manufacturing',
          'retail',
          'energy',
          'automotive',
          'aerospace'
        ]
        setVerticals(staticVerticals)
      } catch (error) {
        console.error('Failed to load verticals:', error)
      } finally {
        setLoading(false)
      }
    }

    loadVerticals()
  }, [])

  // Handle slider changes with debouncing
  const [sliderValue, setSliderValue] = useState(filters.minScore)
  const [sliderTimeout, setSliderTimeout] = useState<NodeJS.Timeout | null>(null)

  const handleSliderChange = (newValue: number) => {
    setSliderValue(newValue)
    
    // Clear existing timeout
    if (sliderTimeout) {
      clearTimeout(sliderTimeout)
    }
    
    // Set new timeout to update actual value after user stops sliding
    const timeout = setTimeout(() => {
      onChange({ minScore: newValue })
    }, 300) // 300ms delay
    
    setSliderTimeout(timeout)
  }

  // Cleanup timeout on unmount
  useEffect(() => {
    return () => {
      if (sliderTimeout) {
        clearTimeout(sliderTimeout)
      }
    }
  }, [sliderTimeout])

  // Close on outside click
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (panelRef.current && !panelRef.current.contains(event.target as Node)) {
        onClose()
      }
    }

    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside)
      document.body.style.overflow = 'hidden'
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside)
      document.body.style.overflow = 'unset'
    }
  }, [isOpen, onClose])

  if (!isOpen) return null

  return (
    <>
      {/* Backdrop */}
      <div className="fixed inset-0 bg-black bg-opacity-25 z-40" />
      
      {/* Panel */}
      <div 
        ref={panelRef}
        className="fixed top-20 right-4 w-96 bg-white rounded-xl shadow-2xl border border-gray-200 z-50 max-h-[calc(100vh-6rem)] overflow-hidden"
      >
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-100">
          <h3 className="text-lg font-semibold text-gray-900">Filters</h3>
          <button
            onClick={onClose}
            className="p-1 hover:bg-gray-100 rounded-md text-gray-400 hover:text-gray-600 transition-colors"
          >
            <X className="w-5 h-5" />
          </button>
        </div>
        
        {/* Content */}
        <div className="p-6 space-y-8 overflow-y-auto max-h-[calc(100vh-12rem)] custom-scrollbar">
          {/* Min Score Filter */}
          <div>
            <div className="flex items-center justify-between mb-4">
              <label className="text-sm font-medium text-gray-900">
                Minimum Intent Score
              </label>
              <span className="text-lg font-bold text-orange-600">{sliderValue}</span>
            </div>
            
            {/* Custom Slider with Ticks */}
            <div className="relative">
              {/* Tick marks */}
              <div className="flex justify-between absolute w-full -top-2">
                {[1, 2, 3, 4, 5].map((tick) => (
                  <div key={tick} className="flex flex-col items-center">
                    <div className={`w-0.5 h-2 ${sliderValue >= tick ? 'bg-orange-500' : 'bg-gray-300'}`}></div>
                    <span className={`text-xs mt-1 font-medium ${sliderValue >= tick ? 'text-orange-600' : 'text-gray-400'}`}>
                      {tick}
                    </span>
                  </div>
                ))}
              </div>
              
              {/* Slider */}
              <input
                type="range"
                min="1"
                max="5"
                step="1"
                value={sliderValue}
                onChange={(e) => handleSliderChange(parseInt(e.target.value))}
                className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer mt-6 slider-with-ticks"
                style={{
                  background: `linear-gradient(to right, #f97316 0%, #f97316 ${((sliderValue - 1) / 4) * 100}%, #e5e7eb ${((sliderValue - 1) / 4) * 100}%, #e5e7eb 100%)`
                }}
              />
            </div>
            
            <div className="mt-3 flex justify-between text-xs text-gray-500">
              <span>Low Intent</span>
              <span>High Intent</span>
            </div>
          </div>

          {/* Vertical Filter */}
          <div>
            <label className="block text-sm font-medium text-gray-900 mb-3">
              Company Vertical
            </label>
            
            <select
              value={filters.vertical}
              onChange={(e) => onChange({ vertical: e.target.value })}
              className="w-full px-3 py-2.5 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 text-sm bg-white"
              disabled={loading}
            >
              <option value="">All Verticals</option>
              {verticals.map((vertical) => (
                <option key={vertical} value={vertical}>
                  {vertical.charAt(0).toUpperCase() + vertical.slice(1)}
                </option>
              ))}
            </select>
            
            {loading && (
              <p className="text-xs text-gray-500 mt-2">Loading verticals...</p>
            )}
          </div>
        </div>
        
        {/* Footer */}
        <div className="p-6 border-t border-gray-100 flex justify-between">
          <button
            onClick={() => {
              onChange({ minScore: 3, vertical: '' })
              onClose()
            }}
            className="px-4 py-2 text-sm text-gray-600 hover:text-gray-800 font-medium"
          >
            Clear All
          </button>
          <button
            onClick={onClose}
            className="px-6 py-2 bg-orange-500 text-white text-sm font-medium rounded-lg hover:bg-orange-600 transition-colors"
          >
            Apply Filters
          </button>
        </div>
      </div>
    </>
  )
}

============================================================

==================== FILE: src/components/signals/IntentCard.tsx ====================
import React, { useState } from 'react'
import { TrendingUp, Building, Calendar, Users, ExternalLink, Linkedin, Briefcase, ChevronDown, ChevronUp, ThumbsUp, ThumbsDown } from 'lucide-react'
import ReactMarkdown from 'react-markdown'
import { Signal } from '../../hooks/useSignals'

interface IntentCardProps {
  signal: Signal | null
  onApprove: () => void
  onReject: () => void
  isLoading?: boolean
}

const SkeletonIntentCard: React.FC = () => {
  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden animate-pulse min-h-[600px]">
      {/* Header Banner Skeleton */}
      <div className="h-32 bg-gray-200"></div>
      
      <div className="p-6">
        {/* Company Header Skeleton */}
        <div className="flex items-start justify-between mb-8 -mt-12">
          <div className="flex items-center gap-4">
            <div className="w-16 h-16 bg-gray-300 rounded-lg border-2 border-white"></div>
            <div className="mt-8">
              <div className="h-7 bg-gray-200 rounded w-64 mb-3"></div>
              <div className="h-5 bg-gray-200 rounded w-40"></div>
            </div>
          </div>
          <div className="flex items-center gap-2 mt-8">
            <div className="w-6 h-6 bg-gray-200 rounded"></div>
            <div className="h-10 bg-gray-200 rounded w-16"></div>
          </div>
        </div>

        {/* Company Details Skeleton */}
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-8">
          {[...Array(6)].map((_, i) => (
            <div key={i} className="flex items-center gap-3">
              <div className="w-5 h-5 bg-gray-200 rounded"></div>
              <div className="h-5 bg-gray-200 rounded w-32"></div>
            </div>
          ))}
        </div>

        {/* About Section Skeleton */}
        <div className="mb-8">
          <div className="h-5 bg-gray-200 rounded w-24 mb-4"></div>
          <div className="space-y-3">
            <div className="h-5 bg-gray-200 rounded w-full"></div>
            <div className="h-5 bg-gray-200 rounded w-5/6"></div>
            <div className="h-5 bg-gray-200 rounded w-4/5"></div>
          </div>
        </div>

        {/* Analysis Skeleton */}
        <div className="mb-8">
          <div className="h-5 bg-gray-200 rounded w-32 mb-4"></div>
          <div className="space-y-3">
            <div className="h-5 bg-gray-200 rounded w-full"></div>
            <div className="h-5 bg-gray-200 rounded w-11/12"></div>
            <div className="h-5 bg-gray-200 rounded w-5/6"></div>
            <div className="h-5 bg-gray-200 rounded w-full"></div>
            <div className="h-5 bg-gray-200 rounded w-4/5"></div>
            <div className="h-5 bg-gray-200 rounded w-3/4"></div>
          </div>
        </div>

        {/* Job Citations Skeleton */}
        <div className="mb-8">
          <div className="h-5 bg-gray-200 rounded w-48 mb-4"></div>
          <div className="space-y-4">
            {[...Array(3)].map((_, i) => (
              <div key={i} className="border border-gray-200 rounded-lg p-5">
                <div className="flex items-start gap-4">
                  <div className="w-10 h-10 bg-gray-200 rounded"></div>
                  <div className="flex-1">
                    <div className="h-5 bg-gray-200 rounded w-3/4 mb-3"></div>
                    <div className="h-4 bg-gray-200 rounded w-2/3 mb-4"></div>
                    <div className="space-y-2">
                      <div className="h-4 bg-gray-200 rounded w-full"></div>
                      <div className="h-4 bg-gray-200 rounded w-5/6"></div>
                      <div className="h-4 bg-gray-200 rounded w-4/5"></div>
                      <div className="h-4 bg-gray-200 rounded w-3/4"></div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Actions Skeleton */}
        <div className="flex justify-center gap-4">
          <div className="w-16 h-16 bg-gray-200 rounded-full"></div>
          <div className="w-16 h-16 bg-gray-200 rounded-full"></div>
        </div>
      </div>
    </div>
  )
}

const JobCitationCard: React.FC<{ job: any; citationIndex: number; isExpanded: boolean; onToggle: () => void }> = ({ 
  job, 
  citationIndex, 
  isExpanded, 
  onToggle 
}) => {
  if (!job) return null

  return (
    <div 
      id={`job-card-${citationIndex}`}
      className="bg-white border border-gray-200 rounded-lg p-4 transition-all duration-200 hover:shadow-sm"
    >
      <div className="flex items-start gap-3">
        {/* Citation number */}
        <div className="w-8 h-8 bg-gray-100 text-gray-700 rounded-md flex items-center justify-center flex-shrink-0 text-sm font-medium">
          {citationIndex + 1}
        </div>
        
        <div className="flex-1 min-w-0">
          {/* Job header */}
          <div className="flex items-start justify-between mb-2">
            <div className="flex-1">
              <h5 className="font-medium text-gray-900 text-sm mb-1">{job.title}</h5>
              <div className="text-xs text-gray-600 space-x-2">
                <span>{job.company}</span>
                <span>•</span>
                <span>{job.location}</span>
                <span>•</span>
                <span>{job.datePosted}</span>
                {job.isRemote && (
                  <>
                    <span>•</span>
                    <span className="text-green-600">Remote</span>
                  </>
                )}
              </div>
            </div>
            <button
              onClick={onToggle}
              className="text-gray-400 hover:text-gray-600 p-1"
            >
              {isExpanded ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
            </button>
          </div>
          
          {/* Job description */}
          {isExpanded && (
            <div className="mt-3 pt-3 border-t border-gray-100">
              <div className="prose prose-sm max-w-none text-gray-700">
                <ReactMarkdown 
                  components={{
                    h1: ({children}) => <h1 className="text-base font-semibold text-gray-900 mb-2">{children}</h1>,
                    h2: ({children}) => <h2 className="text-sm font-medium text-gray-800 mb-2">{children}</h2>,
                    h3: ({children}) => <h3 className="text-sm font-medium text-gray-800 mb-1">{children}</h3>,
                    p: ({children}) => <p className="text-sm text-gray-700 mb-2 leading-relaxed">{children}</p>,
                    ul: ({children}) => <ul className="list-disc list-inside text-sm text-gray-700 mb-2 space-y-1">{children}</ul>,
                    ol: ({children}) => <ol className="list-decimal list-inside text-sm text-gray-700 mb-2 space-y-1">{children}</ol>,
                    li: ({children}) => <li className="text-sm text-gray-700">{children}</li>,
                    strong: ({children}) => <strong className="font-medium text-gray-900">{children}</strong>,
                    em: ({children}) => <em className="italic text-gray-800">{children}</em>,
                  }}
                >
                  {job.descriptionMarkdown}
                </ReactMarkdown>
              </div>
            </div>
          )}
          
          {/* Action buttons */}
          <div className="flex items-center justify-between mt-3">
            {job.jobUrl && (
              <a
                href={job.jobUrl}
                target="_blank"
                rel="noopener noreferrer"
                className="text-xs text-orange-600 hover:text-orange-700 font-medium"
              >
                View Original Post
              </a>
            )}
            <button
              onClick={onToggle}
              className="text-xs text-gray-600 hover:text-gray-800 font-medium"
            >
              {isExpanded ? 'Show Less' : 'Show More'}
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

export const IntentCard: React.FC<IntentCardProps> = ({ signal, onApprove, onReject, isLoading = false }) => {
  const [expandedJobs, setExpandedJobs] = useState<Set<number>>(new Set())

  const toggleJobExpansion = (index: number) => {
    setExpandedJobs(prev => {
      const newSet = new Set(prev)
      if (newSet.has(index)) {
        newSet.delete(index)
      } else {
        newSet.add(index)
      }
      return newSet
    })
    
    // Scroll to the job card
    setTimeout(() => {
      const element = document.getElementById(`job-card-${index}`)
      if (element) {
        element.scrollIntoView({ behavior: 'smooth', block: 'center' })
      }
    }, 100)
  }

  if (isLoading || !signal) {
    return <SkeletonIntentCard />
  }

  const company = signal.company
  const jobs = signal.jobs || []
  
  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
      {/* Company Banner Header */}
      <div className="relative">
        {company?.bannerUrl && (
          <div className="h-32 relative overflow-hidden">
            <img 
              src={company.bannerUrl} 
              alt=""
              className="w-full h-full object-cover"
              onError={(e) => {
                e.currentTarget.style.display = 'none'
              }}
            />
            <div className="absolute inset-0 bg-black bg-opacity-40"></div>
          </div>
        )}
        
        {/* Header with Company Logo and Info */}
        <div className={`${company?.bannerUrl ? 'absolute bottom-0 left-0 right-0 p-6 text-white' : 'p-6'}`}>
          <div className="flex items-start justify-between">
            <div className="flex items-center gap-4">
              <div className="relative">
                {company?.logoUrl || company?.profilePictureUrl ? (
                  <img 
                    src={company.logoUrl || company.profilePictureUrl} 
                    alt={company.name || 'Company logo'}
                    className="w-16 h-16 rounded-lg object-cover border-2 border-white shadow-sm"
                    onError={(e) => {
                      e.currentTarget.style.display = 'none'
                      const fallback = e.currentTarget.nextElementSibling as HTMLElement
                      if (fallback) fallback.style.display = 'flex'
                    }}
                  />
                ) : null}
                <div 
                  className={`w-16 h-16 bg-gradient-to-br from-orange-100 to-orange-200 rounded-lg flex items-center justify-center text-orange-600 font-bold text-lg border-2 border-white shadow-sm ${
                    company?.logoUrl || company?.profilePictureUrl ? 'hidden' : 'flex'
                  }`}
                >
                  {company?.name ? company.name.substring(0, 2).toUpperCase() : 'UN'}
                </div>
              </div>
              <div>
                <div className="flex items-center gap-2">
                  <h3 className={`text-lg sm:text-xl font-semibold ${company?.bannerUrl ? 'text-white' : 'text-gray-900'}`}>
                    {company?.name || 'Unknown Company'}
                  </h3>
                  {company?.website && (
                    <a
                      href={company.website}
                      target="_blank"
                      rel="noopener noreferrer"
                      className={`${company?.bannerUrl ? 'text-white hover:text-gray-200' : 'text-blue-600 hover:text-blue-800'}`}
                    >
                      <Linkedin className="w-4 h-4" />
                    </a>
                  )}
                </div>
                <p className={`text-sm ${company?.bannerUrl ? 'text-gray-200' : 'text-gray-600'}`}>
                  {company?.industry || 'Unknown Industry'}
                </p>
                {company?.vertical && (
                  <span className={`inline-block mt-1 px-2 py-1 text-xs rounded-full ${
                    company?.bannerUrl 
                      ? 'bg-white bg-opacity-20 text-white' 
                      : 'bg-purple-100 text-purple-700'
                  }`}>
                    {company.vertical}
                  </span>
                )}
              </div>
            </div>
            <div className="flex items-center gap-2">
              <TrendingUp className={`w-5 h-5 ${company?.bannerUrl ? 'text-white' : 'text-orange-500'}`} />
              <span className={`text-xl font-bold ${company?.bannerUrl ? 'text-white' : 'text-orange-500'}`}>
                {signal.intentScore.toFixed(1)}
              </span>
            </div>
          </div>
        </div>
      </div>

      <div className="p-6">

      {/* Company Details Grid */}
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6">
        {company?.website && (
          <div className="flex items-center gap-2 text-sm text-gray-600">
            <ExternalLink className="w-4 h-4" />
            <a 
              href={company.website} 
              className="text-blue-600 hover:underline truncate"
              target="_blank"
              rel="noopener noreferrer"
            >
              Website
            </a>
          </div>
        )}
        {company?.headquarters && (
          <div className="flex items-center gap-2 text-sm text-gray-600">
            <Building className="w-4 h-4" />
            <span className="truncate">{company.headquarters}</span>
          </div>
        )}
        {company?.companySize && (
          <div className="flex items-center gap-2 text-sm text-gray-600">
            <Users className="w-4 h-4" />
            <span>{company.companySize}</span>
          </div>
        )}
        {company?.founded && (
          <div className="flex items-center gap-2 text-sm text-gray-600">
            <Calendar className="w-4 h-4" />
            <span>Founded {company.founded}</span>
          </div>
        )}
        {company?.type && (
          <div className="flex items-center gap-2 text-sm text-gray-600">
            <Building className="w-4 h-4" />
            <span>{company.type}</span>
          </div>
        )}
        {signal.jobsFoundCount > 0 && (
          <div className="flex items-center gap-2 text-sm text-gray-600">
            <Briefcase className="w-4 h-4" />
            <span>{signal.jobsFoundCount} jobs found</span>
          </div>
        )}
      </div>

      {/* About Us Section */}
      {company?.aboutUs && (
        <div className="mb-6 pb-6 border-b border-gray-100">
          <h4 className="text-sm font-medium text-gray-900 mb-2">About</h4>
          <p className="text-sm text-gray-700 leading-relaxed line-clamp-3">
            {company.aboutUs}
          </p>
        </div>
      )}

      {/* Specialties */}
      {company?.specialties && (
        <div className="mb-6">
          <h4 className="text-sm font-medium text-gray-900 mb-2">Specialties</h4>
          <p className="text-sm text-gray-700 leading-relaxed">
            {company.specialties.length > 200 ? `${company.specialties.substring(0, 200)}...` : company.specialties}
          </p>
        </div>
      )}

      {/* Reasoning with Interactive Citations */}
      <div className="mb-6">
        <h4 className="text-sm font-medium text-gray-900 mb-2">Intent Analysis</h4>
        <div className="text-sm text-gray-700 leading-relaxed">
          {(() => {
            // Parse reasoning text and inject clickable citations for job IDs in curly braces
            const citationRegex = /\{([^}]+)\}/g
            const parts = []
            let lastIndex = 0
            let match
            let citationNumber = 1

            while ((match = citationRegex.exec(signal.reasoning)) !== null) {
              // Add text before citation
              if (match.index > lastIndex) {
                parts.push(signal.reasoning.slice(lastIndex, match.index))
              }
              
              // Find the job that matches this citation ID (Backblaze UUID)
              const citationId = match[1]
              const jobIndex = jobs.findIndex(job => 
                job.pageHtmlBackblazeUuid === citationId ||
                job.id === citationId || 
                job.jobUrl?.includes(citationId) ||
                citationId.includes(job.id)
              )
              
              parts.push(
                <button
                  key={`citation-${citationNumber}`}
                  className="inline-flex items-center justify-center w-5 h-5 bg-orange-100 text-orange-600 rounded-full text-xs font-semibold mx-1 hover:bg-orange-200 transition-colors cursor-pointer"
                  onClick={() => toggleJobExpansion(jobIndex >= 0 ? jobIndex : citationNumber - 1)}
                  title={jobIndex >= 0 ? jobs[jobIndex]?.title : `Job ${citationNumber}`}
                >
                  {citationNumber}
                </button>
              )
              
              citationNumber++
              lastIndex = citationRegex.lastIndex
            }
            
            // Add remaining text
            if (lastIndex < signal.reasoning.length) {
              parts.push(signal.reasoning.slice(lastIndex))
            }
            
            return parts.map((part, index) => (
              <span key={index}>{part}</span>
            ))
          })()}
        </div>
      </div>

      {/* Job Citations */}
      {jobs.length > 0 && (
        <div className="mb-6">
          <h4 className="text-sm font-medium text-gray-900 mb-3">
            Evidence from Job Postings ({jobs.length})
          </h4>
          <div className="space-y-3">
            {jobs.map((job, index) => (
              <JobCitationCard
                key={job.id || index}
                job={job}
                citationIndex={index}
                isExpanded={expandedJobs.has(index)}
                onToggle={() => toggleJobExpansion(index)}
              />
            ))}
          </div>
        </div>
      )}

      {/* Actions */}
      <div className="flex justify-center space-x-4 sm:space-x-5">
        {/* Reject Button */}
        <button
          onClick={onReject}
          className="w-14 h-14 sm:w-16 sm:h-16 bg-white border-2 text-red-500 rounded-full flex items-center justify-center shadow-md hover:bg-red-50 transition-all duration-150 ease-in-out transform hover:scale-105"
        >
          <ThumbsDown size={20} />
        </button>
        
        {/* Approve Button */}
        <button
          onClick={onApprove}
          className="w-14 h-14 sm:w-16 sm:h-16 bg-white border-2 text-green-500 rounded-full flex items-center justify-center shadow-md hover:bg-green-50 transition-all duration-150 ease-in-out transform hover:scale-105"
        >
          <ThumbsUp size={20} />
        </button>
      </div>
      </div>
    </div>
  )
}

============================================================

==================== FILE: src/components/signals/ProductSelector.tsx ====================
import { useState, useEffect, useRef } from 'react'
import { api } from '../../lib/apiClient'

interface Props {
  value: string
  onChange: (product: string) => void
}

// Module-level cache for products
let productsCache: string[] | null = null
let productsPromise: Promise<string[]> | null = null

const fetchProducts = async (): Promise<string[]> => {
  if (productsCache) {
    return productsCache
  }
  
  if (productsPromise) {
    return productsPromise
  }
  
  productsPromise = (async (): Promise<string[]> => {
    try {
      console.log('Fetching products (single request)')
      const response = await api.signals.getProducts()
      if (response.data && Array.isArray(response.data)) {
        productsCache = response.data
        return productsCache
      }
      return []
    } catch (error) {
      console.error('Failed to load products:', error)
      return []
    } finally {
      productsPromise = null
    }
  })()
  
  return productsPromise
}

export const ProductSelector = ({ value, onChange }: Props) => {
  const [products, setProducts] = useState<string[]>([])
  const [loading, setLoading] = useState(true)
  const initializedRef = useRef(false)

  useEffect(() => {
    if (!initializedRef.current) {
      initializedRef.current = true
      
      const loadProducts = async () => {
        try {
          const productList = await fetchProducts()
          setProducts(productList)
          // If current value is not in the list, switch to first available
          if (!productList.includes(value) && productList.length > 0) {
            onChange(productList[0])
          }
        } finally {
          setLoading(false)
        }
      }

      loadProducts()
    }
  }, [])

  // Helper function to format product names nicely
  const formatProductName = (product: string) => {
    return product
      .split(/[-_]/)
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ')
  }

  if (loading) {
    return (
      <div className="px-3 py-2 border border-gray-300 rounded-lg bg-gray-100 text-sm text-gray-500">
        Loading...
      </div>
    )
  }

  return (
    <select
      value={value}
      onChange={(e) => onChange(e.target.value)}
      className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 bg-white text-sm text-gray-700"
    >
      {products.map((product) => (
        <option key={product} value={product}>
          {formatProductName(product)}
        </option>
      ))}
    </select>
  )
}

============================================================

==================== FILE: src/components/signals/QueueSidebar.tsx ====================
import { ThumbsUp, ThumbsDown } from 'lucide-react'
import { Signal } from '../../hooks/useSignals'

interface QueueSidebarProps {
  signals: Signal[]
  currentIndex: number
  onSignalSelect?: (index: number) => void
  isLoading?: boolean
}

const SkeletonQueueItem: React.FC = () => {
  return (
    <div className="p-3 border border-gray-200 rounded-lg bg-white animate-pulse">
      <div className="flex items-center space-x-3">
        <div className="w-6 h-6 bg-gray-200 rounded-full"></div>
        <div className="w-8 h-8 bg-gray-200 rounded-lg"></div>
        <div className="flex-1 min-w-0">
          <div className="h-3 bg-gray-200 rounded w-24 mb-1"></div>
          <div className="h-2 bg-gray-200 rounded w-16"></div>
        </div>
        <div className="w-4 h-4 bg-gray-200 rounded"></div>
      </div>
    </div>
  )
}

const SkeletonQueueSidebar: React.FC = () => {
  return (
    <div className="w-full bg-white rounded-lg shadow-sm border border-gray-200 p-4">
      {/* Header Skeleton */}
      <div className="flex justify-between items-center mb-4">
        <div className="h-5 bg-gray-200 rounded w-20"></div>
        <div className="h-4 bg-gray-200 rounded w-16"></div>
      </div>

      {/* Stats Skeleton */}
      <div className="mb-4 p-3 bg-gray-50 rounded-lg border">
        <div className="h-3 bg-gray-200 rounded w-24 mb-2"></div>
        <div className="flex justify-between items-center">
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 bg-gray-200 rounded"></div>
            <div className="h-3 bg-gray-200 rounded w-4"></div>
          </div>
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 bg-gray-200 rounded"></div>
            <div className="h-3 bg-gray-200 rounded w-4"></div>
          </div>
          <div className="h-3 bg-gray-200 rounded w-12"></div>
        </div>
      </div>

      {/* Progress Bar Skeleton */}
      <div className="mb-4">
        <div className="flex justify-between text-xs mb-1">
          <div className="h-3 bg-gray-200 rounded w-12"></div>
          <div className="h-3 bg-gray-200 rounded w-8"></div>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2"></div>
      </div>

      {/* Queue Items Skeleton */}
      <div className="space-y-2">
        {[...Array(5)].map((_, i) => (
          <SkeletonQueueItem key={i} />
        ))}
      </div>
    </div>
  )
}

export const QueueSidebar: React.FC<QueueSidebarProps> = ({ 
  signals, 
  currentIndex, 
  onSignalSelect, 
  isLoading = false 
}) => {
  if (isLoading) {
    return <SkeletonQueueSidebar />
  }

  const totalSignals = signals.length
  const progress = totalSignals > 0 ? ((currentIndex + 1) / totalSignals) * 100 : 0

  // Calculate decision stats
  const approvedCount = signals.filter(s => s.decision === "approve").length
  const rejectedCount = signals.filter(s => s.decision === "reject").length
  const reviewedCount = approvedCount + rejectedCount

  return (
    <div className="w-full bg-white rounded-lg shadow-sm border border-gray-200 p-4 flex flex-col h-full">
      {/* Header */}
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-semibold text-gray-900">
          Queue
        </h3>
        <span className="text-sm text-gray-500">
          {totalSignals > 0 ? `${totalSignals} signals` : "Empty"}
        </span>
      </div>

      {/* Decision Stats */}
      {totalSignals > 0 && (
        <div className="mb-4 p-3 bg-gray-50 rounded-lg border border-gray-100">
          <div className="text-xs font-medium text-gray-700 mb-2">Review Progress</div>
          <div className="flex justify-between items-center">
            <div className="flex items-center gap-1">
              <ThumbsUp className="w-3 h-3 text-green-500" />
              <span className="text-xs text-green-600 font-medium">{approvedCount}</span>
            </div>
            <div className="flex items-center gap-1">
              <ThumbsDown className="w-3 h-3 text-red-500" />
              <span className="text-xs text-red-600 font-medium">{rejectedCount}</span>
            </div>
            <div className="text-xs text-gray-500">
              {reviewedCount}/{totalSignals}
            </div>
          </div>
        </div>
      )}

      {/* Progress Bar */}
      <div className="mb-4">
        <div className="flex justify-between text-xs text-gray-500 mb-1">
          <span>Progress</span>
          <span>{Math.round(progress)}%</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2">
          <div 
            className="bg-orange-500 h-2 rounded-full transition-all duration-300"
            style={{ width: `${progress}%` }}
          />
        </div>
      </div>

      {/* Queue Items - Scrollable */}
      {signals.length > 0 ? (
        <div className="flex-1 overflow-y-auto custom-scrollbar">
          <div className="space-y-2 pb-2">
            {signals.map((signal, actualIndex) => {
              const isCurrentSignal = actualIndex === currentIndex
              const hasDecision = signal.decision && (signal.decision === "approve" || signal.decision === "reject")
              
              return (
                <div
                  key={signal.id}
                  onClick={() => onSignalSelect && onSignalSelect(actualIndex)}
                  className={`p-3 border rounded-lg transition-all duration-200 flex items-center gap-3 group
                    ${onSignalSelect ? 'cursor-pointer' : ''} 
                    ${
                      isCurrentSignal
                        ? "border-orange-500 bg-orange-50 shadow-sm"
                        : hasDecision
                        ? signal.decision === "approve"
                          ? "border-green-200 bg-green-50"
                          : "border-red-200 bg-red-50"
                        : "border-gray-200 bg-white hover:bg-gray-50 hover:border-gray-300"
                    }`}
                >
                  {/* Position indicator */}
                  <div className={`w-6 h-6 rounded-full text-xs font-semibold flex items-center justify-center flex-shrink-0
                    ${isCurrentSignal 
                      ? 'bg-orange-500 text-white' 
                      : hasDecision
                      ? signal.decision === "approve"
                        ? 'bg-green-500 text-white'
                        : 'bg-red-500 text-white'
                      : 'bg-gray-300 text-gray-600'
                    }`}
                  >
                    {actualIndex + 1}
                  </div>

                  {/* Company logo */}
                  <div className="relative flex-shrink-0">
                    {signal.company?.logoUrl || signal.company?.profilePictureUrl ? (
                      <img 
                        src={signal.company.logoUrl || signal.company.profilePictureUrl} 
                        alt={signal.company.name || 'Company logo'}
                        className="w-8 h-8 rounded-lg object-cover"
                        onError={(e) => {
                          e.currentTarget.style.display = 'none'
                          const fallback = e.currentTarget.nextElementSibling as HTMLElement
                          if (fallback) fallback.style.display = 'flex'
                        }}
                      />
                    ) : null}
                    <div 
                      className={`w-8 h-8 bg-gradient-to-br from-orange-100 to-orange-200 rounded-lg flex items-center justify-center text-orange-600 font-semibold text-xs ${
                        signal.company?.logoUrl || signal.company?.profilePictureUrl ? 'hidden' : 'flex'
                      }`}
                    >
                      {signal.company?.name ? signal.company.name.substring(0, 2).toUpperCase() : 'UN'}
                    </div>
                  </div>

                  {/* Company info */}
                  <div className="flex-1 min-w-0">
                    <div className="text-sm font-medium text-gray-900 truncate">
                      {signal.company?.name || 'Unknown Company'}
                    </div>
                    <div className="text-xs text-gray-500">
                      Score: {signal.intentScore.toFixed(1)}
                    </div>
                  </div>

                  {/* Decision status */}
                  {hasDecision && (
                    <div className="flex-shrink-0">
                      {signal.decision === "approve" ? (
                        <ThumbsUp className="w-4 h-4 text-green-500" />
                      ) : (
                        <ThumbsDown className="w-4 h-4 text-red-500" />
                      )}
                    </div>
                  )}
                </div>
              )
            })}
          </div>
        </div>
      ) : (
        <div className="text-center py-8 text-gray-500 text-sm">
          No signals to display
        </div>
      )}
    </div>
  )
}

============================================================

==================== FILE: src/components/signals/SignalsPage.tsx ====================
import { useState, useCallback } from 'react'
import { Calendar, Filter, RotateCcw, Sparkles, TrendingUp } from 'lucide-react'
import { DateSelector } from './DateSelector'
import { ProductSelector } from './ProductSelector'
import { FilterPanel } from './FilterPanel'
import { IntentCard } from './IntentCard'
import { QueueSidebar } from './QueueSidebar'
import { useSignals } from '../../hooks/useSignals'

interface FilterOptions {
  product: string
  minScore: number
  vertical: string
}

export const SignalsPage = () => {
  // State management
  const [selectedDate, setSelectedDate] = useState<string>(() => {
    const yesterday = new Date()
    yesterday.setDate(yesterday.getDate() - 1)
    return yesterday.toISOString().split('T')[0]
  })
  
  const [filters, setFilters] = useState<FilterOptions>({
    product: 'salesforce',
    minScore: 3,
    vertical: ''
  })
  
  const [currentIndex, setCurrentIndex] = useState(0)
  const [showFilters, setShowFilters] = useState(false)

  // Custom hook for signals data with comprehensive loading states
  const { 
    signals, 
    isLoading,
    isIntentScoresLoading,
    isCompaniesLoading,
    isJobsLoading,
    error, 
    refetch,
    markSignal
  } = useSignals(selectedDate, filters)

  const currentSignal = signals[currentIndex] || null

  // Handlers
  const handleDateChange = useCallback((date: string) => {
    setSelectedDate(date)
    setCurrentIndex(0)
  }, [])

  const handleFilterChange = useCallback((newFilters: Partial<FilterOptions>) => {
    setFilters(prev => ({ ...prev, ...newFilters }))
    setCurrentIndex(0)
  }, [])

  const handleApprove = useCallback(async () => {
    if (!currentSignal) return
    await markSignal(currentSignal.id, 'approve')
    if (currentIndex < signals.length - 1) {
      setCurrentIndex(currentIndex + 1)
    }
  }, [currentSignal, markSignal, currentIndex, signals.length])

  const handleReject = useCallback(async () => {
    if (!currentSignal) return
    await markSignal(currentSignal.id, 'reject')
    if (currentIndex < signals.length - 1) {
      setCurrentIndex(currentIndex + 1)
    }
  }, [currentSignal, markSignal, currentIndex, signals.length])

  // Filter status
  const hasActiveFilters = filters.minScore > 3 || filters.vertical

  // Determine overall loading state
  const isAnyLoading = isLoading || isIntentScoresLoading || isCompaniesLoading || isJobsLoading

  return (
    <div className="h-screen bg-gray-50 overflow-hidden flex flex-col">
      {/* Fixed Header */}
      <div className="flex-shrink-0 bg-white border-b border-gray-200 px-4 sm:px-6 lg:px-8 py-2 z-10">
        <div className="max-w-7xl mx-auto">
          {/* Main Header Row */}
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-2">
            <div className="mb-2 sm:mb-0">
              <h1 className="text-xl font-bold text-gray-900">
                Intent Signals
              </h1>
            </div>
            
            <div className="flex items-center gap-2">
              <ProductSelector
                value={filters.product}
                onChange={(product) => handleFilterChange({ product })}
              />
              
              <button
                onClick={() => setShowFilters(!showFilters)}
                className={`inline-flex items-center gap-2 px-2 py-1.5 border rounded-lg text-sm font-medium transition-colors ${
                  showFilters || hasActiveFilters
                    ? 'bg-orange-50 border-orange-200 text-orange-700' 
                    : 'border-gray-300 text-gray-700 hover:bg-gray-50'
                }`}
              >
                <Filter className="w-4 h-4" />
                Filters
                {hasActiveFilters && (
                  <span className="w-2 h-2 bg-orange-500 rounded-full"></span>
                )}
              </button>
              
              <DateSelector
                selectedDate={selectedDate}
                onChange={handleDateChange}
              />
            </div>
          </div>

          {/* Stats Row */}
          {signals.length > 0 && !isIntentScoresLoading && (
            <div className="flex items-center gap-6 mb-2">
              <div className="flex items-center gap-2">
                <span className="text-xs text-gray-600">Total:</span>
                <span className="text-sm font-semibold text-gray-900">{signals.length}</span>
              </div>
              <div className="flex items-center gap-2">
                <span className="text-xs text-gray-600">Position:</span>
                <span className="text-sm font-semibold text-gray-900">{currentIndex + 1}</span>
              </div>
              {currentSignal && (
                <div className="flex items-center gap-2">
                  <span className="text-xs text-gray-600">Score:</span>
                  <span className="text-sm font-semibold text-orange-600">{currentSignal.intentScore.toFixed(1)}</span>
                </div>
              )}
            </div>
          )}

          {/* Loading Status */}
          {isAnyLoading && (
            <div className="mb-2 p-2 bg-blue-50 border border-blue-200 rounded text-xs">
              <div className="flex items-center gap-2">
                <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-blue-500"></div>
                <div className="text-blue-700">
                  {isIntentScoresLoading && 'Loading intent scores...'}
                  {isCompaniesLoading && 'Loading company details...'}
                  {isJobsLoading && 'Loading job citations...'}
                  {isLoading && !isIntentScoresLoading && !isCompaniesLoading && !isJobsLoading && 'Loading...'}
                </div>
              </div>
            </div>
          )}

          {/* Active Filters - Always visible in small grey text */}
          <div className="mb-2">
            <div className="flex items-center gap-3 text-xs text-gray-500">
              <span>Filters:</span>
              <span>Product: {filters.product}</span>
              {filters.minScore > 3 && <span>Min Score: {filters.minScore}</span>}
              {filters.vertical && <span>Vertical: {filters.vertical}</span>}
              {!hasActiveFilters && <span className="text-gray-400">Default</span>}
            </div>
          </div>

        </div>
      </div>

      {/* Main Content Area */}
      <div className="flex-1 max-w-7xl mx-auto flex gap-6 px-4 sm:px-6 lg:px-8 py-6 min-h-0">
        {/* Main Content */}
        <div className="flex-1 overflow-y-auto custom-scrollbar">

          {/* Error State */}
          {error && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-6 mb-6">
              <div className="flex items-center gap-3 mb-3">
                <div className="w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center">
                  <span className="text-red-600 text-lg">⚠</span>
                </div>
                <h3 className="text-red-800 font-semibold">Error Loading Signals</h3>
              </div>
              <p className="text-red-600 mb-4">{error}</p>
              <button 
                onClick={() => refetch()}
                className="inline-flex items-center gap-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
              >
                <RotateCcw className="w-4 h-4" />
                Retry
              </button>
            </div>
          )}

          {/* Empty State - only show when all loading is done */}
          {!isAnyLoading && signals.length === 0 && !error && (
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-12 text-center">
              <div className="w-16 h-16 bg-gray-100 rounded-lg flex items-center justify-center mx-auto mb-4">
                <Calendar className="w-8 h-8 text-gray-400" />
              </div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                No Intent Signals Found
              </h3>
              <p className="text-gray-600 mb-6">
                No companies match your current filters for {selectedDate}. 
                Try adjusting your filters or selecting a different date.
              </p>
              <div className="flex justify-center gap-3">
                <button
                  onClick={() => handleFilterChange({ minScore: 3, vertical: '' })}
                  className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  Clear Filters
                </button>
                <button
                  onClick={() => refetch()}
                  className="px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors"
                >
                  Refresh
                </button>
              </div>
            </div>
          )}

          {/* Intent Card */}
          {(currentSignal || isAnyLoading) && (
            <IntentCard
              signal={currentSignal}
              onApprove={handleApprove}
              onReject={handleReject}
              isLoading={isAnyLoading}
            />
          )}

          {/* Completion State */}
          {!isAnyLoading && signals.length > 0 && currentIndex >= signals.length && (
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-12 text-center">
              <div className="w-16 h-16 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4">
                <span className="text-green-600 text-2xl">🎉</span>
              </div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                All Signals Reviewed!
              </h3>
              <p className="text-gray-600 mb-6">
                You've completed your review of all {signals.length} signals for {selectedDate}.
              </p>
              <button
                onClick={() => {
                  setCurrentIndex(0)
                  refetch()
                }}
                className="inline-flex items-center gap-2 px-6 py-3 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors"
              >
                <RotateCcw className="w-4 h-4" />
                Review Again
              </button>
            </div>
          )}
          </div>

        {/* Sidebar */}
        <div className="w-80 flex-shrink-0 min-h-0">
          <QueueSidebar 
            signals={signals}
            currentIndex={currentIndex}
            onSignalSelect={setCurrentIndex}
            isLoading={isAnyLoading}
          />
        </div>
      </div>

      {/* Filter Panel Overlay */}
      <FilterPanel
        filters={filters}
        onChange={handleFilterChange}
        isOpen={showFilters}
        onClose={() => setShowFilters(false)}
      />
    </div>
  )
}

============================================================

==================== FILE: src/components/signals/StatsOverview.tsx ====================
import type { Signal } from './types'

interface Props {
  totalSignals: number
  currentIndex: number
  currentSignal: Signal | null
}

export const StatsOverview = ({ totalSignals, currentIndex, currentSignal }: Props) => {
  return (
    <div className="mb-6 grid grid-cols-2 md:grid-cols-4 gap-4">
      <div className="bg-white rounded-lg border border-gray-200 p-4 text-center">
        <div className="text-2xl font-bold text-orange-600">{totalSignals}</div>
        <div className="text-xs text-gray-600 uppercase tracking-wider">Active Signals</div>
      </div>
      
      <div className="bg-white rounded-lg border border-gray-200 p-4 text-center">
        <div className="text-2xl font-bold text-blue-600">
          {currentSignal?.intentScore?.intentScore ? Math.round(currentSignal.intentScore.intentScore) : '0'}
        </div>
        <div className="text-xs text-gray-600 uppercase tracking-wider">Current Score</div>
      </div>
      
      <div className="bg-white rounded-lg border border-gray-200 p-4 text-center">
        <div className="text-2xl font-bold text-purple-600">
          {currentSignal?.citedJobs?.length || 0}
        </div>
        <div className="text-xs text-gray-600 uppercase tracking-wider">Evidence Points</div>
      </div>
      
      <div className="bg-white rounded-lg border border-gray-200 p-4 text-center">
        <div className="text-2xl font-bold text-green-600">
          {currentIndex + 1}
        </div>
        <div className="text-xs text-gray-600 uppercase tracking-wider">Current Signal</div>
      </div>
    </div>
  )
}

============================================================

==================== FILE: src/main.tsx ====================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

============================================================

